<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cien años de soledad</title>
  
  <subtitle>code trips and tips</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://septimuszhu.github.io/"/>
  <updated>2020-05-19T08:59:56.338Z</updated>
  <id>http://septimuszhu.github.io/</id>
  
  <author>
    <name>Zhu Guodong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多用户vnc访问方法</title>
    <link href="http://septimuszhu.github.io/2020/04/30/vnc/"/>
    <id>http://septimuszhu.github.io/2020/04/30/vnc/</id>
    <published>2020-04-30T02:54:33.991Z</published>
    <updated>2020-05-19T08:59:56.338Z</updated>
    
    <content type="html"><![CDATA[<p>在工作中经常遇到多个人同时使用一台机器同一个软件的情况，软件带有GUI，需要使用GPU，且因端口冲突，无法同时打开。使用docker封装和display映射，实现多用户共享的方法记录如下。</p><a id="more"></a><h4 id="准备工作">准备工作</h4><p>创建linux用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -m user_a -d /home/user_a --shell /bin/bash</span><br></pre></td></tr></table></figure><p>登陆用户账号并启动vnc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startx</span><br></pre></td></tr></table></figure><p>查询displayname</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep xinit</span><br></pre></td></tr></table></figure><p>启动vnc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x11vnc -display displayname -rfbport port_not_used -forever -capslock -nomodtweak -nevershared -repeat -noxfixes -noxrecord -noxdamage</span><br></pre></td></tr></table></figure><h4 id="启动">启动</h4><p>使用vnc viewer或者类似软件连接vnc，打开终端并输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhost +</span><br></pre></td></tr></table></figure><p>运行软件，docker镜像构建构建不在此说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --runtime=nvidia --privileged --mac-address=xx:xx:xx:xx:xx:xx -v /software_path:/root -v /tmp.X11-unix:/tmp/.X11-unix -v /usr/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu -e DISPLAY=$DISPLAY -p port_not_used:port_of_software registry.xx.xx/xx:1.0 /bin/bash</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在工作中经常遇到多个人同时使用一台机器同一个软件的情况，软件带有GUI，需要使用GPU，且因端口冲突，无法同时打开。使用docker封装和display映射，实现多用户共享的方法记录如下。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://septimuszhu.github.io/categories/linux/"/>
    
    
      <category term="vnc" scheme="http://septimuszhu.github.io/tags/vnc/"/>
    
  </entry>
  
  <entry>
    <title>驾驶行为分析</title>
    <link href="http://septimuszhu.github.io/2019/01/28/driver-behavior-analysis/"/>
    <id>http://septimuszhu.github.io/2019/01/28/driver-behavior-analysis/</id>
    <published>2019-01-28T08:38:54.000Z</published>
    <updated>2019-01-28T08:44:40.297Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述">概述</h2><p>通过车载设备、用户手机和穿戴设备的传感器，获取车辆和驾驶员相关数据，通过数据分析模型和大数据实时计算等手段，对驾驶行为和驾驶技术进行实时监测和智能评估，对于交通事故减少、驾驶技术提升，以及UBI定价等方面，都有重要的参考价值。从社会环境和经济价值上看，降低行车事故发生率，降低车辆保费和燃油成本，这些方面都是积极正面的。</p><a id="more"></a><h2 id="相关方分析">相关方分析</h2><ul><li><p>车厂</p><p>通过IVI、TBOX、C-Link、OBD、ADAS等终端数据采集并上传云端分析，使汽车具备实时驾驶行为分析与安全行车提示、精确燃油经济性分析、节能驾驶指导等功能。为车厂提供车联网大数据服务，提升用户对产品更省油、更安全的品牌认知。</p></li><li><p>保险</p><p>通过精准的驾驶行为分析，将车主数据从原始的理赔数据向驾驶数据迁移拓展，为保险公司提供新的保费计算参数，助力保险公司重构精算模型，降低理赔风险，提高车险盈利，增强用户粘性。</p></li><li><p>车队</p><p>驾驶行为分析为车队员工的绩效及工作质量管理提供新的方式，促进车队盈利能力提升，员工驾驶技术提升，降低车队的保费支出。</p></li><li><p>个人</p><p>通过手机和穿戴设备传感器的数据采集，获取车辆行驶状态和驾驶员状态，包括车辆速度、加速度、驾驶员心率和心律状态、语言情感状态等信息，通过多种手段，包括分析车辆状态、驾驶员情绪（愤怒和极度悲伤时心率快且心律不稳）、NLP情感分析（sentiment analysis）等对个人驾驶行为进行多维度个性化分析，引导驾驶人改善驾驶行为，降低行车风险。</p></li></ul><h2 id="危险驾驶行为">危险驾驶行为</h2><table><thead><tr><th>行为</th><th>说明</th><th>标准</th></tr></thead><tbody><tr><td>急加速（Harsh acceleration）</td><td></td><td>一级加速：每秒时速差&gt;10KM/h；二级加速：&gt;8KM/h; 三级加速：&gt;6KM/h，持续2秒以上</td></tr><tr><td>急减速（Harsh braking）</td><td></td><td>一级减速：每秒时速差&gt;10KM/h；二级减速：&gt;8KM/h; 三级减速：&gt;6KM/h，持续2秒以上</td></tr><tr><td>频繁刹车（Frequent braking）</td><td></td><td></td></tr><tr><td>超速行驶（Speeding）</td><td></td><td>一级超速：超过道路限速50%以上；二级超速：超过20%以上；三级超速：超过10%以上</td></tr><tr><td>高速转弯（Harsh high speed turning）</td><td>车辆重心高低影响不同转弯角度下最大转弯车速</td><td></td></tr><tr><td>慢速行驶（Slow driving）</td><td>行驶速度低于道路最低限速，常见于高速道路</td><td></td></tr><tr><td>频繁停车（Frequent stopping）</td><td></td><td></td></tr><tr><td>疲劳驾驶（Fatigued driving）</td><td>通过穿戴设备CPC（ CardioPulmonary Coupling心肺耦合图谱）分析，达到类似EEG（ Electroencephalogram脑电波）分析的效果，判断驾驶员疲劳程度</td><td></td></tr></tbody></table><h2 id="车辆检测方法">车辆检测方法</h2><ul><li><p>急加减速、超速/慢速行驶</p><p>周期性采集车辆经纬度，从地图信息中获取车辆位置所在路段限速，在给定时间窗内判断急加减速和超速/慢速行驶行为次数。</p></li><li><p>疲劳驾驶检测</p><p>传统的基于车辆行为的疲劳驾驶检测较为简单，主要通过驾驶时间、方向盘转动频率、踩刹车和油门的频率等方式，另外，可借助前置摄像头，检测前方道路状况的单调性，间接估计驾驶员疲劳程度。此类方法通常精度不高，且欠缺灵敏度。</p></li></ul><h2 id="驾驶员检测方法">驾驶员检测方法</h2><ul><li><p>生理状态检测</p><p>目前在穿戴设备可检测的生理状态包括心率、心律和心电信号。心率和心律会反应一个人的生理情况和情绪情况，例如驾驶员瞌睡时，心率下降心律稳定；当愤怒或者悲伤时，心率提高心律不稳等等。甚至可以通过某些穿戴设备的CPC分析功能，提供更详细精确的生理状况分析。</p></li><li><p>面部图像识别</p><p>通过采集驾驶员面部特征变化来判断疲劳，主要包括瞳孔大小、眨眼频率、眼睛转动速度、眼睛闭合度、闭眼时间占比等等，通过简单的逻辑回归算法或者复杂的卷积神经网络（CNN），都可以做到判断驾驶员是否疲劳。缺点是需要较多的训练数据，而且摄像头对准驾驶员脸部会给驾驶员带来心理不适感。</p></li><li><p>语音识别(speech recognition)和情感分析(sentiment analysis)</p><p>具有危险驾驶行为的驾驶员通常伴随着严重的路怒症的，并且不吐不快，不骂不爽。通过对驾驶员的说话语音识别和情感分析，可以获知当前驾驶员的情绪状态。通过递归神经网络（RNN）和迁移学习（transfer learning）等手段，检测驾驶员情绪状态。</p></li></ul><h2 id="总结">总结</h2><p>驾驶行为分析包含多种行为内容和检测手段，根据使用场景的不同，以及硬件条件的不同，各种行为内容会有不同的权重，最终的驾驶行为打分可能根据不同的驾驶行为以线性函数(linear function)方式展示，也有可能以高阶多项式函数（high-degree polynomial function）方式展示，并无标准的公式可供套用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;
&lt;p&gt;通过车载设备、用户手机和穿戴设备的传感器，获取车辆和驾驶员相关数据，通过数据分析模型和大数据实时计算等手段，对驾驶行为和驾驶技术进行实时监测和智能评估，对于交通事故减少、驾驶技术提升，以及UBI定价等方面，都有重要的参考价值。从社会环境和经济价值上看，降低行车事故发生率，降低车辆保费和燃油成本，这些方面都是积极正面的。&lt;/p&gt;
    
    </summary>
    
      <category term="Vehicle" scheme="http://septimuszhu.github.io/categories/Vehicle/"/>
    
    
      <category term="driver behavior" scheme="http://septimuszhu.github.io/tags/driver-behavior/"/>
    
      <category term="AI" scheme="http://septimuszhu.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Flink SQL 原理及使用入门</title>
    <link href="http://septimuszhu.github.io/2018/10/31/Flink%20SQL%20%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    <id>http://septimuszhu.github.io/2018/10/31/Flink SQL 原理及使用入门/</id>
    <published>2018-10-31T06:38:54.000Z</published>
    <updated>2019-02-01T01:51:51.845Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>基于Apache Flink 1.6.x</p></blockquote><h3 id="1-get-started">1 Get Started</h3><p>Flink SQL是Flink高层API，语法遵循ANSI SQL标准。示例如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> car_id, <span class="keyword">MAX</span>(speed), <span class="keyword">COUNT</span>(speed)</span><br><span class="line"><span class="keyword">FROM</span> drive_data</span><br><span class="line"><span class="keyword">WHERE</span> speed &gt; <span class="number">90</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> TUMBLE (proctime, <span class="built_in">INTERVAL</span> <span class="string">'30'</span> <span class="keyword">SECOND</span>), car_id</span><br></pre></td></tr></table></figure><p>Flink SQL是在Flink Table API的基础上发展起来的，与上述示例对应的Table API示例如下</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">table.where(<span class="symbol">'speed</span> &gt; <span class="number">90</span>)</span><br><span class="line">  .window(<span class="type">Tumble</span> over <span class="number">30.</span>second on <span class="symbol">'proctime</span> as <span class="symbol">'w</span>)</span><br><span class="line">  .groupBy(<span class="symbol">'w</span>, <span class="symbol">'car_id</span>)</span><br><span class="line">  .select(<span class="symbol">'car_id</span>, <span class="symbol">'speed</span>.max, <span class="symbol">'speed</span>.count)</span><br></pre></td></tr></table></figure><p>上述示例使用Scala代码，结合隐式转换和中缀表示等Scala语法，Table API代码看起来非常接近SQL表达。</p><a id="more"></a><h3 id="2-架构原理">2 架构原理</h3><p>老版本的Table API通过类似链式调用的写法，构造一棵Table Operator树，并对各个树节点做代码生成，转化成Flink低层API调用代码，即DataStream/DataSet API。</p><p>从2016年开始，开源社区已经有大量SQL-on-Hadoop的成熟解决方案，包括Apache Hive、Apache Impala、Apache Drill等等，都依赖Apache Calcite提供的SQL解析优化能力，Apache Calcite当时已经是一个非常流行的业界标准SQL解析和优化框架。于此同时，随着在实时分析领域中Flink的应用场景增加，对SQL API的呼声渐高，于是社区开始在Apache Calcite的基础上构建新版本的Table API，并增加SQL API支持。</p><p><img src="https://flink.apache.org/img/blog/stream-sql/new-table-api.png" alt="img"></p><p>新版本的Table &amp; SQL API在原有的Table API基础上，由Calcite提供SQL解析和优化能力，将Table API调用和SQL查询统一转换成Calcite逻辑执行计划（Calcite RelNode树），并对此进行优化和代码生成，最终同样转化成Flink DataStream/DataSet API调用代码。</p><h3 id="3-ddl-dml">3 DDL &amp; DML</h3><p>完整的SQL语法由DDL（data definition language）和DML（data manipulation language）两部分组成。Flink SQL目前只支持DML语法，而包含数据流定义的DDL语法仍需通过代码实现。</p><p>国内各大公有云厂商中，阿里云和华为云提供了基于Flink SQL的实时流计算服务，各自定义了一套DDL语法，语法大同小异。以华为云为例，数据流定义以<code>CREATE STREAM</code>为关键字，具体的DDL写法示例如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SOURCE</span> STREAM driver_behavior (car_id <span class="keyword">STRING</span>, speed <span class="built_in">INT</span>, collect_time <span class="keyword">LONG</span>)</span><br><span class="line"><span class="keyword">WITH</span> (</span><br><span class="line">  <span class="keyword">type</span> = <span class="string">"kafka"</span>,</span><br><span class="line">  kafka_bootstrap_servers = <span class="string">"10.10.10.10:3456,10.10.10.20:3456"</span>,</span><br><span class="line">  kafka_group_id = <span class="string">"group1"</span>,</span><br><span class="line">  kafka_topic = <span class="string">"topic1"</span>,</span><br><span class="line">  <span class="keyword">encode</span> = <span class="string">"csv"</span>,</span><br><span class="line">  field_delimiter = <span class="string">","</span></span><br><span class="line">) <span class="built_in">TIMESTAMP</span> <span class="keyword">BY</span> collect_time.ROWTIME;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> SINK STREAM over_speed_warning (message <span class="keyword">STRING</span>)</span><br><span class="line"><span class="keyword">WITH</span> (</span><br><span class="line">  <span class="keyword">type</span> = <span class="string">"smn"</span>,</span><br><span class="line">  region = <span class="string">"cn-north-1"</span>,</span><br><span class="line">  topic_urn = <span class="string">"urn:smn:cn-north-1:38834633fd6f4bae813031b5985dbdea:warning"</span>,</span><br><span class="line">  message_subject = <span class="string">"title"</span>,</span><br><span class="line">  message_column = <span class="string">"message"</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>DDL中包含输入数据流和输出数据流定义，描述实时流计算的数据上下游生态组件，在上述例子中，输入流（<code>SOURCE STREAM</code>）类型是Kafka，<code>WITH</code>子句描述了Kafka消费者相关配置。输出流（<code>SINK STREAM</code>）类型是SMN，是华为云消息通知服务的缩写，用于短信和邮件通知。</p><p>数据从Kafka流入，向SMN服务流出，而中间的数据处理逻辑由DML实现，具体的DML写法示例如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> over_speed_warning</span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">"your car speed ("</span> || <span class="keyword">CAST</span>(speed <span class="keyword">as</span> <span class="built_in">CHAR</span>(<span class="number">20</span>)) || <span class="string">") exceeds the maximum speed."</span></span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> car_id, <span class="keyword">MAX</span>(speed) <span class="keyword">AS</span> speed, <span class="keyword">COUNT</span>(speed) <span class="keyword">AS</span> overspeed_count</span><br><span class="line">  <span class="keyword">FROM</span> driver_behavior</span><br><span class="line">  <span class="keyword">WHERE</span> speed &gt; <span class="number">90</span></span><br><span class="line">  <span class="keyword">GROUP</span> <span class="keyword">BY</span> TUMBLE (collect_time, <span class="built_in">INTERVAL</span> <span class="string">'30'</span> <span class="keyword">SECOND</span>), car_id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">WHERE</span> overspeed_count &gt;= <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>以上DML语句，描述了在30秒内车辆累计超速三次时，向作为输出流的下游SMN组件输出告警消息。DML语句中<code>INSERT INTO</code>关键字后紧接着输出流名，而<code>FROM</code>关键字后紧接着输入流名，<code>SELECT</code> 子句表达输出的内容，<code>WHERE</code>子句表达输出需要满足的过滤条件。上述例子使用到了SQL子查询，外层<code>FROM</code>后跟着一整个<code>SELECT</code>子句，为了方便理解，我们也可以把子查询语法转化成等价的临时流定义表达，在华为云实时流计算服务的DDL语法中支持了这种特性，与上述DML写法等价的示例如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TEMP STREAM over_speed_info (car_id <span class="keyword">STRING</span>, speed <span class="built_in">INT</span>, overspeed_count <span class="built_in">INT</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> over_speed_info</span><br><span class="line"><span class="keyword">SELECT</span> car_id, <span class="keyword">MAX</span>(speed) <span class="keyword">AS</span> speed, <span class="keyword">COUNT</span>(speed) <span class="keyword">AS</span> overspeed_count</span><br><span class="line"><span class="keyword">FROM</span> driver_behavior</span><br><span class="line"><span class="keyword">WHERE</span> speed &gt; <span class="number">90</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> TUMBLE (collect_time, <span class="built_in">INTERVAL</span> <span class="string">'30'</span> <span class="keyword">SECOND</span>), car_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> over_speed_warning</span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">"your car speed ("</span> || <span class="keyword">CAST</span>(speed <span class="keyword">as</span> <span class="built_in">CHAR</span>(<span class="number">20</span>)) || <span class="string">") exceeds the maximum speed."</span></span><br><span class="line"><span class="keyword">FROM</span> over_speed_info</span><br><span class="line"><span class="keyword">WHERE</span> overspeed_count &gt;= <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>通过<code>TEMP STREAM</code> 语法定义临时流，可以将带有子查询的SQL语法平铺表达，串接数据流逻辑，更容易理解。</p><h3 id="4-语法">4 语法</h3><p>Flink SQL的核心部分是DML语法，基础的DML语法包含笛卡尔积（单表情况下只有Scan操作）、选择（Filter）和投影（Projection）三个数据操作部分，三者分别对应<code>FROM</code>子句、<code>WHERE</code> 子句和<code>SELECT</code>子句，这三个部分的顺序代表了DML语句的逻辑执行顺序。较为进阶的语法包含聚合、窗口和连接（<code>JOIN</code>）等常用语法，以及排序、限制和集合等非常用语法。下表简单列举Flink SQL基础和常用的进阶DML语法句式并加以说明，其他语法元素和内建函数等详细内容，可参考<a href="https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/sql.html" target="_blank" rel="noopener">Flink SQL文档</a></p><ul><li>基础语法</li></ul><table><thead><tr><th style="text-align:left">操作</th><th style="text-align:left">样例</th></tr></thead><tbody><tr><td style="text-align:left">Scan  / Filter / Projection</td><td style="text-align:left">SELECT car_id, speed FROM drive_data WHERE speed &gt; 90</td></tr><tr><td style="text-align:left">Scan / FIlter / Projection / Insert</td><td style="text-align:left">INSERT INTO overspeed SELECT id , speed FROM drive_data WHERE speed &gt; 90</td></tr></tbody></table><ul><li>聚合语法</li></ul><table><thead><tr><th style="text-align:left">操作</th><th style="text-align:left">样例</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">GroupBy Aggregation</td><td style="text-align:left">SELECT MAX(speed) FROM drive_data GROUP BY car_id</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">GroupBy Window Aggregation</td><td style="text-align:left">SELECT car_id, MAX(speed) FROM drive_data GROUP BY TUMBLE(proctime, INTERVAL '1' MINUTE), car_id</td><td style="text-align:left">GroupBy窗口每个聚合周期输出一批聚合结果</td></tr><tr><td style="text-align:left">Over Window Aggregation</td><td style="text-align:left">SELECT MAX(speed) OVER (  PARTITION BY car_id  ORDER BY proctime RANGE BETWEEN INTERVAL '30' SECOND PRECEDING AND CURRENT ROW) FROM drive_data</td><td style="text-align:left">Over窗口每进入一条数据就输出一条聚合结果，且所有的投影属性的Over窗口必须一致</td></tr></tbody></table><ul><li>连接语法</li></ul><table><thead><tr><th style="text-align:left">操作</th><th style="text-align:left">样例</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">Inner Euiq-join</td><td style="text-align:left">SELECT * FROM drive_data INNER JOIN car_info ON drive_data.car_id = car_info.id</td><td style="text-align:left">当前只支持等值连接</td></tr><tr><td style="text-align:left">Time-windowed Join</td><td style="text-align:left">SELECT * FROM drive_data d, camera_data c WHERE d.car_id = c.car_id AND  d.proctime BETWEEN c.proctime - INTERVAL '30' SECOND AND c.proctime</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Table Join</td><td style="text-align:left">SELECT * FROM drive_data INNER JOIN car_info ON drive_data.car_id = car_info.id</td><td style="text-align:left">流表Join语法和流流Join语法类似，Flink SQL目前不支持流表Join，阿里云和华为云实时流计算服务的SQL语法是支持的</td></tr></tbody></table><h3 id="5-场景">5 场景</h3><p>目前Flink SQL的应用场景主要包括ETL实时入库、实时大屏、实时告警等等。</p><p><img src="https://image.slidesharecdn.com/flinkforwardsf2017timowalthertableandsqlapi-170414102541/95/flink-forward-sf-2017-timo-walther-table-sql-api-unified-apis-for-batch-and-stream-processing-21-1024.jpg" alt="img"></p><p>在IoT领域和车联网领域也大量存在潜在的使用场景，华为云实时流计算服务提供了针对这些场景的SQL扩展，包括地理函数，CEP SQL等支持，还支持Streaming ML语法用SQL表达多种实时机器学习算法，包括随机森林算法实现异常检测等场景。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;基于Apache Flink 1.6.x&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-get-started&quot;&gt;1 Get Started&lt;/h3&gt;
&lt;p&gt;Flink SQL是Flink高层API，语法遵循ANSI SQL标准。示例如下&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; car_id, &lt;span class=&quot;keyword&quot;&gt;MAX&lt;/span&gt;(speed), &lt;span class=&quot;keyword&quot;&gt;COUNT&lt;/span&gt;(speed)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; drive_data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; speed &amp;gt; &lt;span class=&quot;number&quot;&gt;90&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; TUMBLE (proctime, &lt;span class=&quot;built_in&quot;&gt;INTERVAL&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;30&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SECOND&lt;/span&gt;), car_id&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Flink SQL是在Flink Table API的基础上发展起来的，与上述示例对应的Table API示例如下&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;table.where(&lt;span class=&quot;symbol&quot;&gt;&#39;speed&lt;/span&gt; &amp;gt; &lt;span class=&quot;number&quot;&gt;90&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .window(&lt;span class=&quot;type&quot;&gt;Tumble&lt;/span&gt; over &lt;span class=&quot;number&quot;&gt;30.&lt;/span&gt;second on &lt;span class=&quot;symbol&quot;&gt;&#39;proctime&lt;/span&gt; as &lt;span class=&quot;symbol&quot;&gt;&#39;w&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .groupBy(&lt;span class=&quot;symbol&quot;&gt;&#39;w&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;&#39;car_id&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .select(&lt;span class=&quot;symbol&quot;&gt;&#39;car_id&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;&#39;speed&lt;/span&gt;.max, &lt;span class=&quot;symbol&quot;&gt;&#39;speed&lt;/span&gt;.count)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述示例使用Scala代码，结合隐式转换和中缀表示等Scala语法，Table API代码看起来非常接近SQL表达。&lt;/p&gt;
    
    </summary>
    
      <category term="Flink" scheme="http://septimuszhu.github.io/categories/Flink/"/>
    
    
      <category term="Flink" scheme="http://septimuszhu.github.io/tags/Flink/"/>
    
      <category term="SQL" scheme="http://septimuszhu.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Anti GFW guide</title>
    <link href="http://septimuszhu.github.io/2018/07/17/Anti-GFW-guide/"/>
    <id>http://septimuszhu.github.io/2018/07/17/Anti-GFW-guide/</id>
    <published>2018-07-17T06:38:54.000Z</published>
    <updated>2019-04-28T07:34:44.775Z</updated>
    
    <content type="html"><![CDATA[<p>公司内网环境有美国代理，但Wi-Fi/4G环境是国内网络，使用Mac与手机时诸多不便，科学上网简要步骤记录如下</p><a id="more"></a><h4 id="ss服务器">ss服务器</h4><p>购买vps或者ecs，国内外提供商都有，网上随便搜搜，各大云厂商有折扣就买，一个月几十块。之前用的是华为云香港区的ecs，选centos系统，KeyPair登陆，绑上弹性IP，安全组开放TCP入方向443端口。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">easy_install pip</span><br><span class="line">yum install git</span><br><span class="line">pip install git+https://github.com/shadowsocks/shadowsocks.git@master</span><br><span class="line">ssserver -p 443 -k yourpswd -m aes-256-cfb --user nobody -d start</span><br></pre></td></tr></table></figure><p>vultr经常有推广活动，目前注册送50刀，注册链接<a href="https://www.vultr.com/?ref=7898253-4F" target="_blank" rel="noopener">https://www.vultr.com/?ref=7898253-4F</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install net-tools</span><br><span class="line">wget -N --no-check certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; ./ssr.sh</span><br><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh</span><br></pre></td></tr></table></figure><h4 id="ss客户端">ss客户端</h4><ul><li><p>iPhone手机没越狱，在闲鱼买了个香港或者美国appleid，下载shadowrocket、kite、openwingy等软件，配置服务器ip密码加密方式即可</p></li><li><p>MacBook 网页shadowsocks官网下载客户端（需先用vpn软件翻墙）shadowsocksX/shadowsocksX-NG，安装后配置与iPhone类似</p></li><li><p>MacBook 终端终端默认无法使用http代理，使用brew、sbt、git等命令时特别慢，需要安装privoxy（shadowsocksX-NG自带），在shell的rc脚本中配置（~/.zshrc)</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alias proxy='export all_proxy=socks5://127.0.0.1:1080'</span><br><span class="line">alias unproxy='unset all_proxy'</span><br><span class="line">export JAVA_OPTS="$JAVA_OPTS -Dhttp.proxyHost=127.0.0.1 -Dhttp.proxyPort=8118"</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司内网环境有美国代理，但Wi-Fi/4G环境是国内网络，使用Mac与手机时诸多不便，科学上网简要步骤记录如下&lt;/p&gt;
    
    </summary>
    
      <category term="科学上网" scheme="http://septimuszhu.github.io/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
    
      <category term="GFW" scheme="http://septimuszhu.github.io/tags/GFW/"/>
    
      <category term="shadowsocks" scheme="http://septimuszhu.github.io/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>mesos net_cls test</title>
    <link href="http://septimuszhu.github.io/2017/05/27/mesos-net-cls-test/"/>
    <id>http://septimuszhu.github.io/2017/05/27/mesos-net-cls-test/</id>
    <published>2017-05-27T03:38:04.000Z</published>
    <updated>2019-01-02T07:11:06.619Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-mesos启动参数配置">1.mesos启动参数配置</h4><p>slave启动参数配置，增加net_cls</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo cgroups/cpu,cgroups/mem,cgroups/net_cls &gt; /etc/mesos-slave/isolation</span><br></pre></td></tr></table></figure><p>增加mesos-slave启动参数<code>--cgroups_net_cls_primary_handle=0x0001</code>，可以通过修改<code>/usr/bin/mesos-init-wrapper</code>脚本实现，最终mesos-slave启动参数如下：</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/mesos-slave --master=zk://10.120.177.85:2181,10.120.181.94:2181,10.120.180.209:2181/mesos --log_dir=/var/log/mesos --cgroups_net_cls_primary_handle=0x0001 --containerizers=mesos --isolation=cgroups/cpu,cgroups/mem,cgroups/net_cls --work_dir=/var/lib/meso</span><br></pre></td></tr></table></figure><p>此时mesos会为每个容器分配一个16位的cgroups_net_cls_secondary_handle，和cgroups_net_cls_primary_handle(0x0001)一起组成一个classid。</p><h4 id="2-启动应用">2. 启动应用</h4><p>使用marathon提交nc命令行应用，向对端发数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="string">"/basic-023"</span>,</span><br><span class="line">  <span class="attr">"cmd"</span>: <span class="string">"yes ssssssssssssssssssssss|nc 10.162.174.188 5567"</span>,</span><br><span class="line">  <span class="attr">"cpus"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"mem"</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">"disk"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"instances"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>nethogs</code>工具查看进程流量：</p><p><img src="https://github.com/SeptimusZhu/flink-related/blob/master/pic/rmp_net_cls_before.png?raw=true" alt=""></p><h4 id="3-启用流控规则">3. 启用流控规则</h4><p>查看容器进程的classid：</p><p><img src="https://github.com/SeptimusZhu/flink-related/blob/master/pic/rmp_net_cls_classid.png?raw=true" alt=""></p><p>65538 = 0x00010002</p><p>使用tc工具配置规则：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tc qdisc del dev eth0 root</span><br><span class="line">tc qdisc add dev eth0 root handle 1: htb</span><br><span class="line">tc class add dev eth0 parent 1: classid 1: htb rate 1000mbit ceil 1000mbit</span><br><span class="line">tc class add dev eth0 parent 1: classid 1:2 htb rate 1mbit</span><br><span class="line">tc filter add dev eth0 protocol ip parent 1:0 prio 1 handle 1:2 cgroup</span><br></pre></td></tr></table></figure><p>查看进行流控后的容器进程流量：</p><p><img src="https://github.com/SeptimusZhu/flink-related/blob/master/pic/rmp_net_cls_after.png?raw=true" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-mesos启动参数配置&quot;&gt;1.mesos启动参数配置&lt;/h4&gt;
&lt;p&gt;slave启动参数配置，增加net_cls&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;echo cgroups/cpu,cgroups/mem,cgroups/net_cls &amp;gt; /etc/mesos-slave/isolation&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;增加mesos-slave启动参数&lt;code&gt;--cgroups_net_cls_primary_handle=0x0001&lt;/code&gt;，可以通过修改&lt;code&gt;/usr/bin/mesos-init-wrapper&lt;/code&gt;脚本实现，最终mesos-slave启动参数如下：&lt;/p&gt;
    
    </summary>
    
      <category term="Mesos" scheme="http://septimuszhu.github.io/categories/Mesos/"/>
    
    
      <category term="Mesos" scheme="http://septimuszhu.github.io/tags/Mesos/"/>
    
      <category term="net_cls" scheme="http://septimuszhu.github.io/tags/net-cls/"/>
    
      <category term="流控" scheme="http://septimuszhu.github.io/tags/%E6%B5%81%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Get Started with Flink on top of Mesos Marathon</title>
    <link href="http://septimuszhu.github.io/2017/04/24/get-started-with-flink-on-top-of-mesos-marathon/"/>
    <id>http://septimuszhu.github.io/2017/04/24/get-started-with-flink-on-top-of-mesos-marathon/</id>
    <published>2017-04-24T14:57:11.000Z</published>
    <updated>2019-01-02T07:11:06.623Z</updated>
    
    <content type="html"><![CDATA[<p>Based on CentOS 7</p><h3 id="准备">准备</h3><h4 id="rpm安装包准备">rpm安装包准备</h4><p><a href="http://dl.marmotte.net/rpms/redhat/el7/x86_64/zookeeper-3.4.9-3.el7/zookeeper-3.4.9-3.el7.noarch.rpm" target="_blank" rel="noopener">zookeeper</a></p><p><a href="http://repos.mesosphere.com/el/7/x86_64/RPMS/mesos-1.1.0-2.0.107.centos701406.x86_64.rpm" target="_blank" rel="noopener">mesos</a></p><p><a href="http://repos.mesosphere.com/el-testing/6/x86_64/RPMS/marathon-1.4.0-1.0.560.el6.x86_64.rpm" target="_blank" rel="noopener">marathon</a></p><a id="more"></a><h4 id="环境准备">环境准备</h4><p>三台机器的集群，网络互通，关闭防火墙和SELinux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld &amp;&amp; setenforce 0</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">节点</th><th style="text-align:center">IP</th><th style="text-align:center">部署服务</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">10.120.177.85</td><td style="text-align:center">zookeeper、mesos-master、mesos-slave、marathon</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">10.120.181.94</td><td style="text-align:center">zookeeper、mesos-master、mesos-slave、marathon</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">10.120.180.209</td><td style="text-align:center">zookeeper、mesos-master、mesos-slave、marathon</td></tr></tbody></table><h4 id="安装">安装</h4><p>node1、node2、node3:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh zookeeper*.rpm</span><br><span class="line">yum install libevent libevent-devel -y</span><br><span class="line">rpm -ivh mesos*.rpm</span><br><span class="line">rpm -ivh marathon*.rpm</span><br></pre></td></tr></table></figure><h3 id="配置">配置</h3><h4 id="zookeeper配置">zookeeper配置</h4><p>node1:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt; /var/lib/zookeeper/myid</span><br></pre></td></tr></table></figure><p>node2:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 2 &gt; /var/lib/zookeeper/myid</span><br></pre></td></tr></table></figure><p>node3:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 3 &gt; /var/lib/zookeeper/myid</span><br></pre></td></tr></table></figure><p>node1、node2、node3配置<code>/etc/zookeeper/zoo.cfg</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.1=10.120.177.85:2888:3888</span><br><span class="line">server.2=10.120.181.94:2888:3888</span><br><span class="line">server.3=10.120.180.209:2888:3888</span><br></pre></td></tr></table></figure><h4 id="mesos配置">mesos配置</h4><p>node1、node2、node3配置<code>/etc/mesos/zk</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zk://10.120.177.85:2181,10.120.181.94:2181,10.120.180.209:2181/mesos</span><br></pre></td></tr></table></figure><p>node1、node2、node3:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>集群中节点数为3</span><br><span class="line">echo 2 &gt; /etc/mesos-master/quorum</span><br></pre></td></tr></table></figure><h4 id="marathon配置">marathon配置</h4><p>node1、node2、node3:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>用于生成marathon.jar</span><br><span class="line">marathon</span><br></pre></td></tr></table></figure><h3 id="启动">启动</h3><p>node1、node2、node3:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart zookeeper</span><br><span class="line">systemctl restart mesos-master</span><br><span class="line">systemctl restart mesos-slave</span><br><span class="line">marathon run_jar --master zk://10.120.177.85:2181,10.120.181.94:2181,10.120.180.209:2181/mesos --zk zk://10.120.177.85:2181,10.120.181.94:2181,10.120.180.209:2181/marathon</span><br></pre></td></tr></table></figure><p>可通过三个节点IP访问mesos webUI和marathon webUI，会重定向到zk选举出来的Master节点，以10.120.181.94为例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mesos webUI address: 10.120.181.94:5050</span><br><span class="line">marathon webUI address: 10.120.181.94:8080</span><br></pre></td></tr></table></figure><h4 id="部署flink">部署Flink</h4><p>编写json格式的marathon应用描述文件flink-example.json:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="string">"flink"</span>,</span><br><span class="line">  <span class="attr">"cmd"</span>: <span class="string">"/home/flink-1.2.0/bin/mesos-appmaster.sh -Dmesos.master=zk://10.120.177.85:2181,10.120.181.94:2181,10.120.180.209:2181/mesos -Dmesos.initial-tasks=3 -Dmesos.resourcemanager.tasks.cpus=1.0 -Dmesos.resourcemanager.tasks.mem=1024"</span>,</span><br><span class="line">  <span class="attr">"cpus"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"mem"</span>: <span class="number">1024</span>,</span><br><span class="line">  <span class="attr">"disk"</span>: <span class="number">2048</span>,</span><br><span class="line">  <span class="attr">"instances"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过Marathon WebUI提交或者使用curl命令提交:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://10.120.181.94:8080/v2/apps -d @flink-example.json -H "Content-type: application/json"</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Based on CentOS 7&lt;/p&gt;
&lt;h3 id=&quot;准备&quot;&gt;准备&lt;/h3&gt;
&lt;h4 id=&quot;rpm安装包准备&quot;&gt;rpm安装包准备&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://dl.marmotte.net/rpms/redhat/el7/x86_64/zookeeper-3.4.9-3.el7/zookeeper-3.4.9-3.el7.noarch.rpm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;zookeeper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://repos.mesosphere.com/el/7/x86_64/RPMS/mesos-1.1.0-2.0.107.centos701406.x86_64.rpm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mesos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://repos.mesosphere.com/el-testing/6/x86_64/RPMS/marathon-1.4.0-1.0.560.el6.x86_64.rpm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;marathon&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Flink" scheme="http://septimuszhu.github.io/categories/Flink/"/>
    
    
      <category term="Flink" scheme="http://septimuszhu.github.io/tags/Flink/"/>
    
      <category term="Mesos" scheme="http://septimuszhu.github.io/tags/Mesos/"/>
    
      <category term="Marathon" scheme="http://septimuszhu.github.io/tags/Marathon/"/>
    
  </entry>
  
  <entry>
    <title>deploy flink on mesos marathon</title>
    <link href="http://septimuszhu.github.io/2017/04/12/deploy-flink-on-mesos-marathon/"/>
    <id>http://septimuszhu.github.io/2017/04/12/deploy-flink-on-mesos-marathon/</id>
    <published>2017-04-12T14:08:38.000Z</published>
    <updated>2019-01-02T07:11:06.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mesos部署">Mesos部署</h2><h4 id="1-下载安装">1.下载安装</h4><p>从官网下载Mesos的rpm安装包（<a href="http://repos.mesosphere.com/el/7/x86_64/RPMS/mesos-1.1.0-2.0.107.centos701406.x86_64.rpm" target="_blank" rel="noopener">下载链接</a>）并在所有集群节点中安装mesos</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mesos-1.1.0*.rpm</span><br></pre></td></tr></table></figure><p>注：可能会报libevent-devel依赖未安装，使用命令<code>yum install libevent libevent-devel -y</code>安装</p><a id="more"></a><h4 id="2-集群部署">2.集群部署</h4><ul><li><p>在<code>/usr/etc/mesos</code>目录下增加名为masters和slaves的文件，分别配上master节点和agent(worker)节点的ip列表，以换行分隔，以1个master节点2个agent节点为例：</p><p><img src="https://github.com/SeptimusZhu/flink-related/blob/master/pictures/mesos_master_slave.PNG?raw=true" alt=""></p></li><li><p>在master节点所在机器的<code>/usr/etc/mesos</code>目录下，增加mesos-master-env.sh脚本（在相同目录下已存在模板），配置mesos工作目录环境变量<code>export MESOS_work_dir=/xxx/xxx</code></p><p><img src="https://github.com/SeptimusZhu/flink-related/blob/master/pictures/mesos_master_env.PNG?raw=true" alt=""></p></li><li><p>在agent节点所在机器（在本例中，包括9.96.101.32和9.96.101.251两个节点）的<code>/usr/etc/mesos</code>目录下，增加mesos-agent-env.sh脚本（在相同目录下已存在模板），配置mesos master地址<code>export MESOS_master=xx.xx.xx.xx:5050</code>，和mesos工作目录环境变量<code>export MESOS_work_dir=/xxx/xxx</code></p><p><img src="https://github.com/SeptimusZhu/flink-related/blob/master/pictures/mesos_agent_env.PNG?raw=true" alt=""></p></li><li><p>运行<code>/usr/sbin/mesos-start-cluster.sh</code>启动集群</p><p><img src="https://github.com/SeptimusZhu/flink-related/blob/master/pictures/mesos_start_cluster.PNG?raw=true" alt=""></p></li><li><p>访问mesos web页面<code>http://masterIP:5050</code>可以查看mesos集群状态和agent列表等信息</p><p><img src="https://github.com/SeptimusZhu/flink-related/blob/master/pictures/mesos_web.PNG?raw=true" alt=""></p></li></ul><p><img src="https://github.com/SeptimusZhu/flink-related/blob/master/pictures/mesos_web_agent.PNG?raw=true" alt=""></p><h4 id="3-部署flink到mesos">3.部署Flink到Mesos</h4><ul><li><p>修改<code>FLINK_HOME/conf/flink-conf.yaml</code>，增加三个配置项：<code>mesos.resourcemanager.tasks.container.type</code>、<code>mesos.master</code>、<code>mesos.initial-tasks</code>，如下图所示，其中mesos.initial-tasks配置项表示taskmanager个数。</p><p><img src="https://github.com/SeptimusZhu/flink-related/blob/master/pictures/mesos_flink_conf.PNG?raw=true" alt=""></p></li><li><p>运行<code>FLINK_HOME/bin/mesos-appmaster.sh</code>向mesos注册schduler并启动jobmanager</p><p><img src="https://github.com/SeptimusZhu/flink-related/blob/master/pictures/mesos_flink_start.PNG?raw=true" alt=""></p></li><li><p>查看mesos web页面，可以看到刚才启动的Flink集群在mesos中体现为1个Framework和2个Task（executor），每个java进程（mesos中的executor，flink中的taskmanager）对应一个sandbox</p><p><img src="https://github.com/SeptimusZhu/flink-related/blob/master/pictures/mesos_web_flink.PNG?raw=true" alt=""></p></li></ul><h4 id="4-查看沙箱目录">4.查看沙箱目录</h4><p>沙箱是每个mesos executor工作时的临时目录。存在于agent节点的工作目录下，工作目录的配置见上文。沙箱的目录结构在官方文档中描述如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root (&apos;--work_dir&apos;)</span><br><span class="line">|-- slaves</span><br><span class="line">|   |-- latest (symlink)</span><br><span class="line">|   |-- &lt;agent ID&gt;</span><br><span class="line">|       |-- frameworks</span><br><span class="line">|           |-- &lt;framework ID&gt;</span><br><span class="line">|               |-- executors</span><br><span class="line">|                   |-- &lt;executor ID&gt;</span><br><span class="line">|                       |-- runs</span><br><span class="line">|                           |-- latest (symlink)</span><br><span class="line">|                           |-- &lt;container ID&gt; (Sandbox!)</span><br></pre></td></tr></table></figure><p>登陆到本例中task所在节点9.96.101.251查看两个task各自的sandbox目录，包含了进程的标准输出、错误、日志，以及flink上传的jar包、配置文件和shell脚本等，与yarn的container目录很类似。</p><p><img src="https://github.com/SeptimusZhu/flink-related/blob/master/pictures/mesos_sandbox.PNG?raw=true" alt=""></p><p>沙箱中的文件包含如下三部分：</p><ul><li>mesos在启动executor的task前获取的文件（flink文件夹）</li><li>executor的输出（stderr，stdout）</li><li>executor创建的文件（flink-taskmanager.log等）</li></ul><h2 id="marathon部署">Marathon部署</h2><h4 id="1-简介">1.简介</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Marathon is a production-proven Apache Mesos framework for container orchestration. Marathon provides a REST API for starting, stopping, and scaling applications.</span><br></pre></td></tr></table></figure><p>翻译一下，Marathon是一个在工业界广泛使用的Mesos框架，用于容器编排。Marathon提供了一套REST API用于任务的启动、停止和扩容。</p><p>Marathon框架通常用于管理长时间运行的任务。</p><h4 id="2-下载安装">2.下载安装</h4><p>从官网下载Marathon的rpm安装包（<a href="http://repos.mesosphere.com/el-testing/6/x86_64/RPMS/marathon-1.4.0-1.0.560.el6.x86_64.rpm" target="_blank" rel="noopener">下载链接</a>）并安装（推荐的安装方式）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh marathon-1.4.0*.rpm</span><br></pre></td></tr></table></figure><p>也可以从Marathon官网下载二进制的包（<a href="http://downloads.mesosphere.com/marathon/v1.4.1/marathon-1.4.1.tgz" target="_blank" rel="noopener">下载地址</a>），使用<code>$MARATHON_HOME/bin/start --master ip:port --zk zk://ip:port/marathon</code>启动Marathon。</p><h4 id="3-启动">3.启动</h4><p>命令样例如下，需要首先启动mesos集群和zk服务，不在此赘述。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/marathon run_jar --master 10.120.177.85:5050 --zk zk://10.120.177.85:2181/marathon</span><br></pre></td></tr></table></figure><p>注：不同版本marathon在zk上的leader信息不兼容，需确保zk中/marathon目录未被不同版本的marathon服务使用过</p><p>可以使用<code>/usr/bin/marathon run_jar --help</code>查看其它配置项说明。</p><h4 id="4-提交任务">4.提交任务</h4><p>可以用两种方式提交应用，WebUI和curl。</p><p>打开Marathon WebUI（默认端口8080），点击Create Application，可以选在使用JSON模式描述任务信息，或者使用UI界面，本例中使用JSON方式，在cmd中写入运行的命令，点击右下角的Create Application提交。</p><p><img src="https://github.com/SeptimusZhu/flink-related/blob/master/pictures/marathon.PNG?raw=true" alt=""></p><p>使用curl方式提交命令格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://10.120.177.85:8080/v2/apps -d @basic-0.json -H "Content-type: application/json"</span><br></pre></td></tr></table></figure><h4 id="5-部署flink">5.部署Flink</h4><p>只需要将cmd的内容修改为<code>$FLINK_HOME/bin/mesos-appmaster.sh -Dmesos.master=$MESOS_MASTER_IP:5050</code>即可在Mesos中部署Flink集群。</p><p>涉及Flink的配置项列表参见<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.2/setup/config.html#mesos" target="_blank" rel="noopener">Flink官网</a>，资源相关的配置项包括<code>mesos.initial-tasks</code>、<code>mesos.resourcemanager.tasks.mem</code>和<code>mesos.resourcemanager.tasks.cpus</code>，分别代表启用多少个TaskManager以及每个TaskManager分配多少内存和CPU资源。</p><p>Mesos的资源分配使用DRF算法，参考论文：<a href="http://static.usenix.org/event/nsdi11/tech/full_papers/Ghodsi.pdf" target="_blank" rel="noopener">Dominant Resource Fairness: Fair Allocation of Multiple Resource Types</a>，解决多种资源类型(主要考虑CPU和内存)的系统的公平资源分配问题。</p><p>使用如下json文件启动flink应用：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="string">"/flink/flink1"</span>,</span><br><span class="line">  <span class="attr">"cmd"</span>: <span class="string">"/home/flink-1.2.0/bin/mesos-appmaster.sh -Dmesos.master=10.120.177.85:5050 -Dmesos.initial-tasks=3 -Dmesos.resourcemanager.tasks.cpus=1.0 -Dmesos.resourcemanager.tasks.mem=1024 -Djobmanager.web.port=-1"</span>,</span><br><span class="line">  <span class="attr">"cpus"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"mem"</span>: <span class="number">1024</span>,</span><br><span class="line">  <span class="attr">"disk"</span>: <span class="number">2048</span>,</span><br><span class="line">  <span class="attr">"instances"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Marathon的应用扩容功能，将实例数改为3：</p><p><img src="https://github.com/SeptimusZhu/flink-related/blob/master/pictures/marathon_scale_app.PNG?raw=true" alt=""></p><p>在Mesos页面中查看部署结果：</p><p><img src="https://github.com/SeptimusZhu/flink-related/blob/master/pictures/marathon_scale_result.PNG?raw=true" alt=""></p><p>Scale Application的过程中，因JobManager RPC端口冲突，会重试数次，最终三个JobManager部署到三个不同的节点上。</p><p>再增加一个Flink应用，因集群资源有限，只有三个节点，因此在运行参数中增加<code>-Djobmanager.web.port=8082 -Djobmanager.rpc.port=6124</code>，避免端口冲突。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="string">"/flink/flink2"</span>,</span><br><span class="line">  <span class="attr">"cmd"</span>: <span class="string">"/home/flink-1.2.0/bin/mesos-appmaster.sh -Dmesos.master=10.120.177.85:5050 -Dmesos.initial-tasks=3 -Dmesos.resourcemanager.tasks.cpus=1.0 -Dmesos.resourcemanager.tasks.mem=1024 -Djobmanager.web.port=-1 -Djobmanager.rpc.port=6124"</span>,</span><br><span class="line">  <span class="attr">"cpus"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"mem"</span>: <span class="number">1024</span>,</span><br><span class="line">  <span class="attr">"disk"</span>: <span class="number">2048</span>,</span><br><span class="line">  <span class="attr">"instances"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部署结果如下:</p><p><img src="https://github.com/SeptimusZhu/flink-related/blob/master/pictures/marathon_add_app_result.PNG?raw=true" alt=""></p><h4 id="6-遇到的问题">6.遇到的问题</h4><ol><li><p>在Marathon中部署跨节点Flink集群时，部署失败</p><p>查看TaskManager日志，报<code>Association failed with [akka.tcp://flink@szv1000265118:6123] Connection refused: szv1000265118/10.120.181.94:6123</code>而JobManager所在节点hostname为SZV1000265118，怀疑与hostname大小写有关。</p><p><a href="https://github.com/apache/flink/pull/3688" target="_blank" rel="noopener">相关github PR</a>，修改hostname后问题解决。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname &lt;hostname&gt;</span><br></pre></td></tr></table></figure></li><li><p>在Marathon中Destroy Application后JobManager退出，但是TaskManager要等数分钟后才退出</p><p>查看日志发现TaskManager向JobManager注册多次后超时关闭，查看代码发现<code>MesosApplicationMasterRunner.java</code>中有如下代码，TaskManager向JobManager注册的最大超时时间为5分钟，在代码中写死，无配置项。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> FiniteDuration TASKMANAGER_REGISTRATION_TIMEOUT = <span class="keyword">new</span> FiniteDuration(<span class="number">5</span>, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure></li><li><p>systemd Mesos守护进程问题</p><p>在Mesos集群重启时，经常发现agent进程起不来，<code>ps -ef | grep mesos</code>查看系统进程时发现运行<code>/usr/sbin/mesos-stop-cluster.sh</code>一段时间后，会出现mesos-master和mesos-slave进程。</p><p>rpm方式安装mesos时，会向systemd注册mesos相关服务，导致mesos相关进程在被杀掉后周期重启，见下图：</p><p><img src="https://github.com/SeptimusZhu/flink-related/blob/master/pictures/mesos_systemd_service.PNG?raw=true" alt=""></p><p>使用<code>systemctl</code>命令停止mesos相关服务后再启动Mesos集群，问题解决。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop mesos-master</span><br><span class="line">systemctl stop mesos-slave</span><br><span class="line">pkill mesos</span><br><span class="line">/usr/sbin/mesos-start-cluster.sh</span><br></pre></td></tr></table></figure></li><li><p>CentOS防火墙问题导致Mesos、Marathon网页无法访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;mesos部署&quot;&gt;Mesos部署&lt;/h2&gt;
&lt;h4 id=&quot;1-下载安装&quot;&gt;1.下载安装&lt;/h4&gt;
&lt;p&gt;从官网下载Mesos的rpm安装包（&lt;a href=&quot;http://repos.mesosphere.com/el/7/x86_64/RPMS/mesos-1.1.0-2.0.107.centos701406.x86_64.rpm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载链接&lt;/a&gt;）并在所有集群节点中安装mesos&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rpm -ivh mesos-1.1.0*.rpm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注：可能会报libevent-devel依赖未安装，使用命令&lt;code&gt;yum install libevent libevent-devel -y&lt;/code&gt;安装&lt;/p&gt;
    
    </summary>
    
      <category term="Flink" scheme="http://septimuszhu.github.io/categories/Flink/"/>
    
    
      <category term="Flink" scheme="http://septimuszhu.github.io/tags/Flink/"/>
    
      <category term="Mesos" scheme="http://septimuszhu.github.io/tags/Mesos/"/>
    
      <category term="Marathon" scheme="http://septimuszhu.github.io/tags/Marathon/"/>
    
  </entry>
  
  <entry>
    <title>tips in Functional Programming in Scala</title>
    <link href="http://septimuszhu.github.io/2017/04/06/functional-programming-in-scala-tips/"/>
    <id>http://septimuszhu.github.io/2017/04/06/functional-programming-in-scala-tips/</id>
    <published>2017-04-06T06:38:54.000Z</published>
    <updated>2019-01-02T08:05:14.111Z</updated>
    
    <content type="html"><![CDATA[<p><s>update everyday</s>(maybe weekly)</p><ul><li><p>partial application</p>  <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compose</span></span>[<span class="type">A</span>,<span class="type">B</span>,<span class="type">C</span>](f: <span class="type">B</span> =&gt; <span class="type">C</span>, g: <span class="type">A</span> =&gt; <span class="type">B</span>): <span class="type">A</span> =&gt; <span class="type">C</span> = &#123;</span><br><span class="line">    (a: <span class="type">A</span>) =&gt; f(g(a))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">curry</span></span>[<span class="type">A</span>,<span class="type">B</span>,<span class="type">C</span>](f: (<span class="type">A</span>, <span class="type">B</span>) =&gt; <span class="type">C</span>): <span class="type">A</span> =&gt; (<span class="type">B</span> =&gt; <span class="type">C</span>) = &#123;</span><br><span class="line">    (a: <span class="type">A</span>) =&gt; ((b: <span class="type">B</span>) =&gt; f(a, b))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uncurry</span></span>[<span class="type">A</span>,<span class="type">B</span>,<span class="type">C</span>](f: <span class="type">A</span> =&gt; <span class="type">B</span> =&gt; <span class="type">C</span>): (<span class="type">A</span>, <span class="type">B</span>) =&gt; <span class="type">C</span> = &#123;</span><br><span class="line">    (a: <span class="type">A</span>, b: <span class="type">B</span>) =&gt; f(a)(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;s&gt;update everyday&lt;/s&gt;(maybe weekly)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;partial application&lt;/p&gt;
  &lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="Scala" scheme="http://septimuszhu.github.io/categories/Scala/"/>
    
    
      <category term="Scala" scheme="http://septimuszhu.github.io/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Libprocess concepts</title>
    <link href="http://septimuszhu.github.io/2017/03/29/libprocess-tips/"/>
    <id>http://septimuszhu.github.io/2017/03/29/libprocess-tips/</id>
    <published>2017-03-29T06:38:54.000Z</published>
    <updated>2019-01-02T08:05:39.274Z</updated>
    
    <content type="html"><![CDATA[<p>先看官方定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Library that provides an actor style message-passing programming model (in C++).</span><br></pre></td></tr></table></figure><p>mesos代码中大篇幅引用libprocess，其中定义了大量异步编程的原语，包括future、promise这些在c++11中也有的概念，onReady、onAny等回调注册接口，以及then串接异步调用等等强大功能。</p><a id="more"></a><h4 id="future-promise-概念">future／promise 概念</h4><p>先看cplusplus.com官方定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. A future is an object that can retrieve a value from some provider object or function, </span><br><span class="line">properly synchronizing this access if in different threads.</span><br><span class="line">2. A promise is an object that can store a value of type T to be retreieved by a future </span><br><span class="line">object (possibly in another thread), offering a synchronization point.</span><br></pre></td></tr></table></figure><p>libprocess中实现了一套类似的future／promise（类比std::future／std::promise），其思想与c++很类似，future读，promise写，消费者持有future，生产者持有promise。</p><h4 id="callback">callback</h4><p>Future对象在函数返回值和入参间传递，存在多个消费者持有Future对象的多份拷贝的情况，因此Future使用一个共享指针成员维护唯一一份Data，在Data中记录Future状态和一系列callback，这些callback由onXXX接口注册，当生产者调用Promise的set等接口改变Future状态时将调用对应的callback。then也应用了callback机制。</p><h4 id="then">then</h4><p>先看示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;string&gt; S = readyFuture()</span><br><span class="line">  .then(lambda::bind(&amp;second, lambda::_1))</span><br><span class="line">  .then(lambda::bind(&amp;third, lambda::_1));</span><br><span class="line"></span><br><span class="line">string s = S.get();</span><br></pre></td></tr></table></figure><p>等同于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;bool&gt; A = oneFuture();</span><br><span class="line">Future&lt;int&gt; B = second(A.get());</span><br><span class="line">Future&lt;string&gt; S = third(B.get());</span><br><span class="line"></span><br><span class="line">string s = S.get();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先看官方定义：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Library that provides an actor style message-passing programming model (in C++).&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;mesos代码中大篇幅引用libprocess，其中定义了大量异步编程的原语，包括future、promise这些在c++11中也有的概念，onReady、onAny等回调注册接口，以及then串接异步调用等等强大功能。&lt;/p&gt;
    
    </summary>
    
      <category term="Mesos" scheme="http://septimuszhu.github.io/categories/Mesos/"/>
    
    
      <category term="libprocess" scheme="http://septimuszhu.github.io/tags/libprocess/"/>
    
  </entry>
  
  <entry>
    <title>Mesos Containerizer</title>
    <link href="http://septimuszhu.github.io/2017/03/24/mesos-containerizer-tips/"/>
    <id>http://septimuszhu.github.io/2017/03/24/mesos-containerizer-tips/</id>
    <published>2017-03-24T06:38:54.000Z</published>
    <updated>2019-01-02T08:06:05.412Z</updated>
    
    <content type="html"><![CDATA[<p>Mesos Containerizer是mesos agent的关键部件，提供容器化所需的服务。</p><ul><li>位于agent和容器之间</li><li>启动、更新和销毁容器</li><li>提供容器间的隔离</li><li>上报容器状态</li></ul><a id="more"></a><p>当前mesos支持以多种方式提供容器服务：Docker Containerizer、Mesos Containerizer以及两者混合。Mesos Containerizer更加稳定。</p><p>Mesos Containerizer主要包括以下三个组件：</p><ul><li>Launcher，负责启动和销毁容器进程</li><li>Isolator，最主要的功能组件，通过cgroup、namespace实现容器间资源隔离</li><li>Provisioner，提供容器镜像支持</li></ul><p>容器启动的主要步骤如下：</p><ol><li><p>Isolator准备</p><p>包含创建cgroup目录和初始化cgroup subsystem相关参数等操作。举一个cgroup subsystem为memory的例子，经过<code>CgroupsIsolatorProcess::prepare</code>的调用过程后，新生成了如下cgroup目录，并设置相关初始化参数</p></li></ol><p align="left">   ![](https://github.com/SeptimusZhu/flink-related/blob/master/pictures/mesos_cgroup_mem.PNG?raw=true)</p>2. 通过Launcher启动容器进程<p>Launcher的具体实现<code>LinuxLauncher</code>通过libprocess的actor模型调用<code>LinuxLauncherProcess::fork</code>创建容器子进程。主要包括创建subsystem为freezer的cgroup，并将子进程pid放入其中，如下图所示：</p><p align="left">   ![](https://github.com/SeptimusZhu/flink-related/blob/master/pictures/mesos_cgroup_freezer.PNG?raw=true)</p>   放入freezer cgroup的进程会暂停，直到隔离和fetch完成后，在exec时通过信号将子进程唤醒。<ol start="3"><li><p>隔离容器进程</p><p>Isolator的具体实现有很多，主要包括cgroup、network cni等资源隔离接口，其中cgroup的隔离的过程就是将进程pid放入对应的cgroup中。具体实现在<code>CgroupsIsolatorProcess::isolate</code></p></li></ol><p align="left">   ![](https://github.com/SeptimusZhu/flink-related/blob/master/pictures/mesos_cgroup_mem_isolate.PNG?raw=true)</p>4. fetch容器资源<p>fetch是一种在容器任务准备时将容器资源下载到沙箱目录的机制，为后续的exec过程做准备。</p><ol start="5"><li><p>执行容器进程</p><p>之前fork出来的容器子进程被唤醒。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mesos Containerizer是mesos agent的关键部件，提供容器化所需的服务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;位于agent和容器之间&lt;/li&gt;
&lt;li&gt;启动、更新和销毁容器&lt;/li&gt;
&lt;li&gt;提供容器间的隔离&lt;/li&gt;
&lt;li&gt;上报容器状态&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Mesos" scheme="http://septimuszhu.github.io/categories/Mesos/"/>
    
    
      <category term="Mesos" scheme="http://septimuszhu.github.io/tags/Mesos/"/>
    
      <category term="容器" scheme="http://septimuszhu.github.io/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Flink Kafka consumer checkpoint机制</title>
    <link href="http://septimuszhu.github.io/2017/02/07/Flink_Kafka_consumer_checkpoint/"/>
    <id>http://septimuszhu.github.io/2017/02/07/Flink_Kafka_consumer_checkpoint/</id>
    <published>2017-02-07T06:38:54.000Z</published>
    <updated>2019-04-28T07:54:27.050Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>基于Apache Flink 1.3</p></blockquote><h2 id="1-概述">1 概述</h2><p>Flink中Kafka consumer算子是有状态的，Kafka offset就是该算子的状态。consumer算子深度集成了Flink checkpoint机制，保证了exactly-once（一条消息被处理一次，区别于at-least-once和at-most-once）。</p><a id="more"></a><p><img src="https://raw.githubusercontent.com/SeptimusZhu/flink-related/master/pictures/checkpoint.PNG" alt=""></p><p>checkpoint机制由Job Manager的<code>CheckpointCoordinator</code>模块控制，用户可以配置checkpoint周期（与savepoint不同，savepoint由用户在用户代码中手动触发）。当触发一次checkpoint，Job Manager会通知Task Manager，Task Manager收到通知后，异步执行所有StreamTask的快照，针对一个StreamTask，遍历所有operator，在operator上执行<code>snapshotState</code>并异步等待结果。当Job Manager的<code>CheckpointCoordinator</code>模块检测到checkpoint完成，会通知所有的Task Manager。</p><h3 id="1-1-offset提交策略">1.1 offset提交策略</h3><p>开启checkpoint的情况下，不会自动向Kafka服务器提交offset确认请求，而是在Task Manager得到Job Manager下发的checkpoint完成通知后，通知所有算子任务，包括consumer算子，将完成checkpoint的offset提交回Kafka Server。</p><p>在09版本Fetcher类<code>Kafka09Fetcher</code>构造方法中，有如下代码，根据是否开启checkpoint决定是否设置自动提交offset。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if checkpointing is enabled, we are not automatically committing to Kafka.</span></span><br><span class="line">kafkaProperties.setProperty(</span><br><span class="line">ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,</span><br><span class="line">Boolean.toString(!enableCheckpointing));</span><br></pre></td></tr></table></figure><blockquote><p>注1：08老版本consumer算子的Fetcher中不存在此类代码，因08版本JM通知checkpoint完成后consumer算子将offset提交到zookeeper中保存，而09版本开始使用提交offset确认到Kafka服务器的策略实现checkpoint功能</p></blockquote><blockquote><p>注2：enable.auto.commit运行参数配置项在09之后的Flink kafka consumer应用中无效，无论是否配置了checkpoint</p></blockquote><p><img src="https://raw.githubusercontent.com/SeptimusZhu/flink-related/master/pictures/kafka_consumer_checkpoint.png" alt=""></p><h2 id="2-样例">2 样例</h2><p>开启checkpoint功能，需要在Flink的Kafka应用代码中加入如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置checkpoint间隔</span></span><br><span class="line">env.getCheckpointConfig().setCheckpointInterval(<span class="number">15000</span>);</span><br><span class="line"><span class="comment">//配置statebackend</span></span><br><span class="line">env.setStateBackend(<span class="keyword">new</span> FsStateBackend(<span class="string">"file:////tmp/backend"</span>));</span><br></pre></td></tr></table></figure><p>为了直观说明checkpoint功能，编写测试代码如下，使用抛异常方式模拟流应用异常，当进入的事件数超过7个时流应用抛异常重启：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadFromKafka</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">env.setParallelism(<span class="number">1</span>);</span><br><span class="line">    env.getCheckpointConfig().setCheckpointInterval(<span class="number">15000</span>);</span><br><span class="line">    env.setStateBackend(<span class="keyword">new</span> FsStateBackend(<span class="string">"file:////tmp/backend"</span>));</span><br><span class="line">ParameterTool parameterTool = ParameterTool.fromArgs(args);</span><br><span class="line">DataStream&lt;String&gt; messageStream = env.addSource(<span class="keyword">new</span> FlinkKafkaConsumer010&lt;&gt;(</span><br><span class="line">    parameterTool.getRequired(<span class="string">"topic"</span>), <span class="keyword">new</span> SimpleStringSchema(),</span><br><span class="line">          parameterTool.getProperties()));</span><br><span class="line"></span><br><span class="line">messageStream.rebalance().map(<span class="keyword">new</span> MapFunction&lt;String, String&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">map</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (count++ == <span class="number">7</span>) &#123;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Failed."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;).print();</span><br><span class="line"></span><br><span class="line">env.execute();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下图所示，Kafka消息按如下时间点依次进入Kafka Consumer：</p><p><img src="https://raw.githubusercontent.com/SeptimusZhu/flink-related/master/pictures/checkpoint2.png" alt=""></p><p>当partition 1的offset 5的消息进入Flink，进入测试代码中的异常分支，流应用重启后，重新向Kafka订阅消息，会从最近保存的checkpoint点的offset开始消费，在此例中，最终print结果中，只有partition 1 offset 4和partition 2 offset 3这两条消息会打印两次（partition之间消息不保序，同partition内保序），第二次异常分支由partition 1 offset 7的消息触发，因其为最近checkpoint后的第一条消息，因此流应用重启后继续从此开始消费。</p><h2 id="3-流程">3 流程</h2><p>以下分别说明正常的checkpoint流程和异常的恢复流程</p><h3 id="3-1-正常流程">3.1 正常流程</h3><p>下图为从Task Manager收到Job Manager的checkpoint消息后Flink Kafka Consumer算子一次完整checkpoint过程的线程时序图：</p><p><img src="https://raw.githubusercontent.com/SeptimusZhu/flink-related/master/pictures/checkpointthreads.png" alt=""></p><blockquote><p>注：正常的checkpoint流程不涉及Consumer算子主线程。</p></blockquote><h3 id="3-2-异常恢复流程">3.2 异常恢复流程</h3><p>Consumer算子初始化时，在<code>FlinkKafkaConsumerBase.initializeState()</code>方法中，会调用<code>OperatorStateStore.getSerializableListState</code>尝试从statebackend中获取最近一次checkpoint保存的offset信息，并将其保存在<code>restoreToOffset</code>中，当Consumer算子主线程开始运行时（<code>FlinkKafkaConsumerBase.run()</code>)，先尝试从<code>restoreToOffset</code>中获取offset，并保存到Consumer算子主线程和Kafka Consumer线程共有的partition集合引用中，从而Kafka Consumer线程可以从该checkpoint指定的partition offset中开始消费消息。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;基于Apache Flink 1.3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-概述&quot;&gt;1 概述&lt;/h2&gt;
&lt;p&gt;Flink中Kafka consumer算子是有状态的，Kafka offset就是该算子的状态。consumer算子深度集成了Flink checkpoint机制，保证了exactly-once（一条消息被处理一次，区别于at-least-once和at-most-once）。&lt;/p&gt;
    
    </summary>
    
      <category term="Flink" scheme="http://septimuszhu.github.io/categories/Flink/"/>
    
    
      <category term="Flink" scheme="http://septimuszhu.github.io/tags/Flink/"/>
    
      <category term="Kafka" scheme="http://septimuszhu.github.io/tags/Kafka/"/>
    
  </entry>
  
</feed>
